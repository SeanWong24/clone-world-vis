/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import { HTMLStencilElement, JSXBase } from '@stencil/core/internal';
import {
  DataRecord,
} from './components/parallel-sets/data-record';

export namespace Components {
  interface SBoxPlot {
    'data': number[];
    'globalMaxValue': number;
    'globalMinValue': number;
  }
  interface SParallelSets {
    'data': DataRecord[];
    'dimensions': string[];
    'ribbonFillCallback': (dataNode: any, _svg: any) => string;
  }
}

declare global {


  interface HTMLSBoxPlotElement extends Components.SBoxPlot, HTMLStencilElement {}
  var HTMLSBoxPlotElement: {
    prototype: HTMLSBoxPlotElement;
    new (): HTMLSBoxPlotElement;
  };

  interface HTMLSParallelSetsElement extends Components.SParallelSets, HTMLStencilElement {}
  var HTMLSParallelSetsElement: {
    prototype: HTMLSParallelSetsElement;
    new (): HTMLSParallelSetsElement;
  };
  interface HTMLElementTagNameMap {
    's-box-plot': HTMLSBoxPlotElement;
    's-parallel-sets': HTMLSParallelSetsElement;
  }
}

declare namespace LocalJSX {
  interface SBoxPlot {
    'data'?: number[];
    'globalMaxValue'?: number;
    'globalMinValue'?: number;
  }
  interface SParallelSets {
    'data'?: DataRecord[];
    'dimensions'?: string[];
    'onRibbonClick'?: (event: CustomEvent<any>) => void;
    'onRibbonLoaded'?: (event: CustomEvent<any>) => void;
    'ribbonFillCallback'?: (dataNode: any, _svg: any) => string;
  }

  interface IntrinsicElements {
    's-box-plot': SBoxPlot;
    's-parallel-sets': SParallelSets;
  }
}

export { LocalJSX as JSX };


declare module "@stencil/core" {
  export namespace JSX {
    interface IntrinsicElements {
      's-box-plot': LocalJSX.SBoxPlot & JSXBase.HTMLAttributes<HTMLSBoxPlotElement>;
      's-parallel-sets': LocalJSX.SParallelSets & JSXBase.HTMLAttributes<HTMLSParallelSetsElement>;
    }
  }
}


